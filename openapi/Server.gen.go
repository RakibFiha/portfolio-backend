// Package Openapi provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package Openapi

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 002 メンバー一覧参照
	// (GET /members)
	GetMembers(w http.ResponseWriter, r *http.Request)
	// 001 メンバー参照
	// (GET /members/{id})
	GetMemberById(w http.ResponseWriter, r *http.Request, id int)
	// 003 Webサービス一覧参照
	// (GET /webservices)
	GetWebservices(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetMembers operation middleware
func (siw *ServerInterfaceWrapper) GetMembers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	siw.Handler.GetMembers(w, r.WithContext(ctx))
}

// GetMemberById operation middleware
func (siw *ServerInterfaceWrapper) GetMemberById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	siw.Handler.GetMemberById(w, r.WithContext(ctx), id)
}

// GetWebservices operation middleware
func (siw *ServerInterfaceWrapper) GetWebservices(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	siw.Handler.GetWebservices(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	r.Group(func(r chi.Router) {
		r.Get("/members", wrapper.GetMembers)
	})
	r.Group(func(r chi.Router) {
		r.Get("/members/{id}", wrapper.GetMemberById)
	})
	r.Group(func(r chi.Router) {
		r.Get("/webservices", wrapper.GetWebservices)
	})

	return r
}
