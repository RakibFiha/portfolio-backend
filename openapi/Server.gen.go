// Package Openapi provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package Openapi

import (
	"context"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi"
	"net/http"
)

type ServerInterface interface {
	// 002 メンバー一覧参照 (GET /members)
	GetMembers(w http.ResponseWriter, r *http.Request)
	// 001 メンバー参照 (GET /members/{id})
	GetMemberById(w http.ResponseWriter, r *http.Request)
	// 003 Webサービス一覧参照 (GET /webservices)
	GetWebservices(w http.ResponseWriter, r *http.Request)
}

// GetMembers operation middleware
func GetMembersCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// GetMemberById operation middleware
func GetMemberByIdCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		var err error

		// ------------- Path parameter "id" -------------
		var id int

		err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
		if err != nil {
			http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
			return
		}

		ctx = context.WithValue(ctx, "id", id)

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// GetWebservices operation middleware
func GetWebservicesCtx(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerFromMux(si, chi.NewRouter())
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	r.Group(func(r chi.Router) {
		r.Use(GetMembersCtx)
		r.Get("/members", si.GetMembers)
	})
	r.Group(func(r chi.Router) {
		r.Use(GetMemberByIdCtx)
		r.Get("/members/{id}", si.GetMemberById)
	})
	r.Group(func(r chi.Router) {
		r.Use(GetWebservicesCtx)
		r.Get("/webservices", si.GetWebservices)
	})

	return r
}
